void fill_map(map<int,vector<int>> &m,queue<pair<TreeNode*,int>> &q)
{
    while(!q.empty())
    {
        int size=q.size();
        while(size){
            TreeNode* frt=(q.front()).first;
            int line=(q.front()).second;
            q.pop();
            
            m[line].push_back(frt->val);
            
            if(frt->left)q.push({frt->left,line-1});
            if(frt->right)q.push({frt->right,line+1});
            
            size--;
        }
    }
}

vector<vector<int> > Solution::verticalOrderTraversal(TreeNode* A) {
    
    vector<vector<int>> ans;
    if(not A) return ans;
    
    //Created an ordered map so that we can give output from left to right
    map<int,vector<int>> m;
    //Pair has node index and its vertical relative position(0->root level)
    queue<pair<TreeNode*,int>> q;
    q.push({A,0});
    
    //We will use bfs(using queue) so that top level gets filled first 
    fill_map(m,q);
    
    for(auto i=m.begin();i!=m.end();i++){
        ans.push_back(i->second);
    }
    return ans;
}