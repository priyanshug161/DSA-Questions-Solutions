int Solution::solve(vector<int> &A, int B) {
    
    int m=A.size();
    //Number of transactions cannot be more than A.size()/2
    int n=min(B+1,m+1/2);
    int dp[n][m];
    
    memset(dp,0,sizeof(dp));
    
    int mx;
    for(int i=1;i<n;i++){
        int profit=INT_MIN;
        for(int j=1;j<m;j++){
            
            profit=max(profit,dp[i-1][j-1]-A[j-1]);
            mx=dp[i][j-1];
            mx=max(mx,profit+A[j]);
            //Reduced the complexity
            /*
            for(int k=0; k<j;k++){
                profit=dp[i-1][k]+(A[j]-A[k]);
                mx=max(mx,profit);
            }
            */
            dp[i][j]=mx;
        }
    }
    
    return dp[n-1][m-1];
   
}
