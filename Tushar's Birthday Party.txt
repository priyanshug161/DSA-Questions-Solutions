int Solution::solve(const vector<int> &A, const vector<int> &B, const vector<int> &C) {
    int ans=0;
    int x=A.size(); //Knapsack repeated for each friend
    for(int y=0;y<x;y++){
        int n=B.size()+1;  //Weight of Items (Filling Capacity of each dish)
        int w=A[y]+1;   //Person's eating Capacity
        int dp[n][w];
        for(int i=0;i<n;i++){   //When eating capacity is 0, person can not take any dish
            dp[i][0]=0;
        }
        for(int j=0;j<w;j++){   //When filling capacity of dish is zero, person can take unlimited dish
            dp[0][j]=INT_MAX/2;
        }
        for(int i=1;i<n;i++){
            for(int j=1;j<w;j++){
                if(B[i-1]<=j){    //Similar to unlimted 0-1 Knapsack
                    dp[i][j]=min(C[i-1]+dp[i][j-B[i-1]], dp[i-1][j]);
                }
                else{
                    dp[i][j]=dp[i-1][j];
                }
            }
        }
        ans=ans+dp[n-1][w-1];
    }
    return ans;
}

