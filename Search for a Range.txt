vector<int> Solution::searchRange(const vector<int> &A, int B) {
   int n = A.size();
        int i = 0, j = n - 1;
        vector<int> ret(2, -1);
        // Search for the left one
        while (i < j)
        {
            int mid = (i + j) /2;
            if (A[mid] < B)
            {
                i = mid + 1;
            }
            else
            {
                j = mid;
            }
        }
        if (A[i]!=B)
        {
            return ret;
        }
        else
        {
            ret[0] = i;
        }
        
        // Search for the right one
        j = n-1;  // We don't have to set i to 0 the second time.
        while (i < j)
        {
            int mid = (i + j)/2 +1 ;   // Make mid biased to the right(for the case where we take the rightmost element)
            if (A[mid] > B)
            {
                j = mid - 1;
            }
            else
            {
                i = mid;
            }
        }
        ret[1] = j;
        return ret; 
}
