int min_tries(int e, int f, vector<vector<int>> &dp){
    
    if(dp[e][f]!=-1){
        return dp[e][f];
    }
    if(e==1 || f==0 || f==1){
        return dp[e][f]=f;
    }
    
    int mn=INT_MAX;
    int low=1, high=f;
    while(low<=high){
        int k=(low+high)/2;
        int down=(dp[e-1][k-1]==-1) ? min_tries(e-1,k-1,dp) : dp[e-1][k-1];
        int up=(dp[e][f-k]==-1) ? min_tries(e,f-k,dp) : dp[e][f-k];
        int temp=1+max(up,down);
        if(down<up){
            low=k+1;
        }
        else{
            high=k-1;
        }
        mn=min(temp,mn);
    }
    return dp[e][f]=mn;
}
int Solution::solve(int A, int B) {
    vector<vector<int>> dp(A+1,vector<int>(B+1,-1));
    //int dp[A+1][B+1];
    //memset(dp,-1,sizeof(dp));
    return min_tries(A,B,dp);
}
