string Solution::solve(int A, int B, int C, int D, vector<int> &E, vector<int> &F) {
    //Checking for each point if its in any circle
    vector<vector<bool>> incircle(A+1,vector<bool>(B+1));
    for(int i=0;i<=A;i++){
        for(int j=0;j<=B;j++){
            bool flag=false;
            for(int k=0;k<C;k++){
                if(pow((E[k]-i),2)+pow((F[k]-j),2)<=pow(D,2)){
                    flag=true;
                    break;
                }
            }
            incircle[i][j]=flag;
            //cout<<incircle[i][j];
        }
        //cout<<endl;
    }
    
    if(incircle[0][0]==true) return "NO";
    
    //All 8 directions to travel
    int dx[8]={1,1,0,-1,-1,-1,0,1};
    int dy[8]={0,1,1,1,0,-1,-1,-1};

    queue<pair<int,int>> q;
    q.push({0,0});
    incircle[0][0]=true;
    while(!q.empty()){
        pair<int,int> top=q.front();
        q.pop();
        if(top.first==A && top.second==B){
            return "YES";
        }
        for(int m=0;m<8;m++){
            int x=top.first+dx[m];
            int y=top.second+dy[m];
            if(x>=0 && x<=A && y>=0 && y<=B && !incircle[x][y]){
                q.push({x,y});
                incircle[x][y]=true;
                //cout<<x<<" "<<y<<endl;
            }
        }
    }
    return "NO";
}
